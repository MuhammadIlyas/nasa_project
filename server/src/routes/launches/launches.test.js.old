const request = require('supertest');
const app = require('../../app');
const {mongoConnect} = require('../../services/mongo');

describe('Test GET /launches', () => {
    test('It should return response with 200', async () => {
        const response = await request(app).get('/launches')
        expect(response.statusCode).toBe(200);
    });
});


describe('Test GET /launches', () => {
    test('It should return response with 200', async () => {
        const response = await request(app)
        .get('/launches')
        .expect(200)
        .expect('Content-Type', /json/);
    });
});


describe('Test POST /launches', () => {
    const launch = {
        mission:'ABC',
        rocket: 'B',
        launchDate: 'January 10, 2023',
        target: 'Target'
    };

    const launchWithoutDate = {
        mission:'ABC',
        rocket: 'B',
        target: 'Target'
    };

    const launchWithInvalidDate = {
        mission:'ABC',
        rocket: 'B',
        launchDate: 'helo',
        target: 'Target'
    };

    test('It should return response with 201', async () => {
        const response = await request(app)
        .post('/launches')
        .send(launch)
        .expect(201)
        .expect('Content-Type', /json/);

        const requestDate =  new Date(launch.launchDate).valueOf();
        const responseDate = new Date(response.body.launchDate).valueOf();

        expect(requestDate).toBe(responseDate);
        expect(response.body).toMatchObject = (launchWithoutDate);
    });

    test('Catch missing required properties', async () => {
        const response = await request(app)
        .post('/launches')
        .send(launchWithoutDate)
        .expect(400)
        .expect('Content-Type', /json/);

        expect(response.body).toStrictEqual({
            error: 'Missing required launch properties',
        }) ;
    });

    test('Invalid Date', async () => {
        const response = await request(app)
        .post('/launches')
        .send(launchWithInvalidDate)
        .expect(400)
        .expect('Content-Type', /json/);

        expect(response.body).toStrictEqual({
            error: 'Invalid launch date',
        }) ;
    });
});
